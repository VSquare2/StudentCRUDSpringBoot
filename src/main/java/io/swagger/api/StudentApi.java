/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.43).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.reactive.function.client.WebClient.ResponseSpec;

import io.swagger.model.ModelApiResponse;
import io.swagger.model.Student;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import reactor.core.publisher.Flux;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen",
date = "2023-05-19T05:07:20.772145680Z[GMT]")
@Validated
public interface StudentApi {

    @Operation(summary = "Add a new student", description = "Add a new student", tags={ "student" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/student",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> addStudent(@Parameter(in = ParameterIn.DEFAULT, description = "Create a new student", required=true, schema=@Schema()) @Valid @RequestBody Student body);


    @Operation(summary = "Deletes a student", description = "delete a student", tags={ "student" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid student value") })
    @RequestMapping(value = "/student/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ModelApiResponse> deleteStudent(@Parameter(in = ParameterIn.PATH, description = "student id to delete", required=true, schema=@Schema()) @PathVariable("id") int id);


    @Operation(summary = "Find student by ID", description = "Returns a single student", tags={ "student" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Student.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "student not found") })
    @RequestMapping(value = "/student/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Student> getStudentById(@Parameter(in = ParameterIn.PATH, description = "ID of student to return", 
    required=true, schema=@Schema()) @PathVariable("id") Integer id) throws Exception;

    
    @Operation(summary = "Update an existing student", description = "Update an existing student by Id", tags={ "student" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "student not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/student/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ModelApiResponse> updateStudent(@Parameter(in = ParameterIn.PATH, description = "ID of student to return", required=true, schema=@Schema())@Valid @RequestBody Student body);
    
    
    public ResponseEntity<List<Student>> getAllStudent() throws Exception;
    
    public ResponseEntity<List<Student>> getTop5Students() throws Exception;
    
    public ResponseEntity<List<Student>> getStudentMarksGreaterThan(@Parameter(in = ParameterIn.PATH, 
    	    required=true, schema=@Schema()) @PathVariable("m") long m) throws Exception;
    
    
    public Student getClient();


	public Flux<Student> getWebClient(Integer id);


	
    
    
    
    
    

}

